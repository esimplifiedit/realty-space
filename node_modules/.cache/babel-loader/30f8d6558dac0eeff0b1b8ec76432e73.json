{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\"; // Ecommerce Redux States\n\nimport { GET_CART_DATA, GET_CUSTOMERS, GET_ORDERS, GET_PRODUCT_DETAIL, GET_PRODUCTS, GET_SHOPS, ADD_NEW_ORDER, DELETE_ORDER, UPDATE_ORDER, ADD_NEW_CUSTOMER, DELETE_CUSTOMER, UPDATE_CUSTOMER } from \"./actionTypes\";\nimport { getCartDataFail, getCartDataSuccess, getCustomersFail, getCustomersSuccess, getOrdersFail, getOrdersSuccess, addOrderFail, addOrderSuccess, updateOrderSuccess, updateOrderFail, deleteOrderSuccess, deleteOrderFail, getProductDetailFail, getProductDetailSuccess, getProductsFail, getProductsSuccess, getShopsFail, getShopsSuccess, addCustomerFail, addCustomerSuccess, updateCustomerSuccess, updateCustomerFail, deleteCustomerSuccess, deleteCustomerFail } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getCartData, getCustomers, getOrders, addNewOrder, updateOrder, deleteOrder, getProducts, getShops, getProductDetail, addNewCustomer, updateCustomer, deleteCustomer } from \"helpers/fakebackend_helper\";\n\nfunction* fetchProducts() {\n  try {\n    const response = yield call(getProducts);\n    yield put(getProductsSuccess(response));\n  } catch (error) {\n    yield put(getProductsFail(error));\n  }\n}\n\nfunction* fetchProductDetail({\n  productId\n}) {\n  try {\n    const response = yield call(getProductDetail, productId);\n    yield put(getProductDetailSuccess(response));\n  } catch (error) {\n    yield put(getProductDetailFail(error));\n  }\n}\n\nfunction* fetchOrders() {\n  try {\n    const response = yield call(getOrders);\n    yield put(getOrdersSuccess(response));\n  } catch (error) {\n    yield put(getOrdersFail(error));\n  }\n}\n\nfunction* onAddNewOrder({\n  payload: order\n}) {\n  try {\n    const response = yield call(addNewOrder, order);\n    yield put(addOrderSuccess(response));\n  } catch (error) {\n    yield put(addOrderFail(error));\n  }\n}\n\nfunction* onUpdateOrder({\n  payload: order\n}) {\n  try {\n    const response = yield call(updateOrder, order);\n    yield put(updateOrderSuccess(response));\n  } catch (error) {\n    yield put(updateOrderFail(error));\n  }\n}\n\nfunction* onDeleteOrder({\n  payload: order\n}) {\n  try {\n    const response = yield call(deleteOrder, order);\n    yield put(deleteOrderSuccess(response));\n  } catch (error) {\n    yield put(deleteOrderFail(error));\n  }\n}\n\nfunction* fetchCartData() {\n  try {\n    const response = yield call(getCartData);\n    yield put(getCartDataSuccess(response));\n  } catch (error) {\n    yield put(getCartDataFail(error));\n  }\n}\n\nfunction* fetchCustomers() {\n  try {\n    const response = yield call(getCustomers);\n    yield put(getCustomersSuccess(response));\n  } catch (error) {\n    yield put(getCustomersFail(error));\n  }\n}\n\nfunction* fetchShops() {\n  try {\n    const response = yield call(getShops);\n    yield put(getShopsSuccess(response));\n  } catch (error) {\n    yield put(getShopsFail(error));\n  }\n}\n\nfunction* onAddNewCustomer({\n  payload: customer\n}) {\n  try {\n    const response = yield call(addNewCustomer, customer);\n    yield put(addCustomerSuccess(response));\n  } catch (error) {\n    yield put(addCustomerFail(error));\n  }\n}\n\nfunction* onUpdateCustomer({\n  payload: customer\n}) {\n  try {\n    const response = yield call(updateCustomer, customer);\n    yield put(updateCustomerSuccess(response));\n  } catch (error) {\n    yield put(updateCustomerFail(error));\n  }\n}\n\nfunction* onDeleteCustomer({\n  payload: customer\n}) {\n  try {\n    const response = yield call(deleteCustomer, customer);\n    yield put(deleteCustomerSuccess(response));\n  } catch (error) {\n    yield put(deleteCustomerFail(error));\n  }\n}\n\nfunction* ecommerceSaga() {\n  yield takeEvery(GET_PRODUCTS, fetchProducts);\n  yield takeEvery(GET_PRODUCT_DETAIL, fetchProductDetail);\n  yield takeEvery(GET_ORDERS, fetchOrders);\n  yield takeEvery(ADD_NEW_ORDER, onAddNewOrder);\n  yield takeEvery(UPDATE_ORDER, onUpdateOrder);\n  yield takeEvery(DELETE_ORDER, onDeleteOrder);\n  yield takeEvery(GET_CART_DATA, fetchCartData);\n  yield takeEvery(GET_CUSTOMERS, fetchCustomers);\n  yield takeEvery(GET_SHOPS, fetchShops);\n  yield takeEvery(ADD_NEW_CUSTOMER, onAddNewCustomer);\n  yield takeEvery(UPDATE_CUSTOMER, onUpdateCustomer);\n  yield takeEvery(DELETE_CUSTOMER, onDeleteCustomer);\n}\n\nexport default ecommerceSaga;","map":{"version":3,"sources":["D:/localserver-php8/htdocs/react/realtyspace/src/store/e-commerce/saga.js"],"names":["call","put","takeEvery","GET_CART_DATA","GET_CUSTOMERS","GET_ORDERS","GET_PRODUCT_DETAIL","GET_PRODUCTS","GET_SHOPS","ADD_NEW_ORDER","DELETE_ORDER","UPDATE_ORDER","ADD_NEW_CUSTOMER","DELETE_CUSTOMER","UPDATE_CUSTOMER","getCartDataFail","getCartDataSuccess","getCustomersFail","getCustomersSuccess","getOrdersFail","getOrdersSuccess","addOrderFail","addOrderSuccess","updateOrderSuccess","updateOrderFail","deleteOrderSuccess","deleteOrderFail","getProductDetailFail","getProductDetailSuccess","getProductsFail","getProductsSuccess","getShopsFail","getShopsSuccess","addCustomerFail","addCustomerSuccess","updateCustomerSuccess","updateCustomerFail","deleteCustomerSuccess","deleteCustomerFail","getCartData","getCustomers","getOrders","addNewOrder","updateOrder","deleteOrder","getProducts","getShops","getProductDetail","addNewCustomer","updateCustomer","deleteCustomer","fetchProducts","response","error","fetchProductDetail","productId","fetchOrders","onAddNewOrder","payload","order","onUpdateOrder","onDeleteOrder","fetchCartData","fetchCustomers","fetchShops","onAddNewCustomer","customer","onUpdateCustomer","onDeleteCustomer","ecommerceSaga"],"mappings":"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","sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\"\n\n// Ecommerce Redux States\nimport {\n  GET_CART_DATA,\n  GET_CUSTOMERS,\n  GET_ORDERS,\n  GET_PRODUCT_DETAIL,\n  GET_PRODUCTS,\n  GET_SHOPS,\n  ADD_NEW_ORDER,\n  DELETE_ORDER,\n  UPDATE_ORDER,\n  ADD_NEW_CUSTOMER,\n  DELETE_CUSTOMER,\n  UPDATE_CUSTOMER\n} from \"./actionTypes\"\nimport {\n  getCartDataFail,\n  getCartDataSuccess,\n  getCustomersFail,\n  getCustomersSuccess,\n  getOrdersFail,\n  getOrdersSuccess,\n  addOrderFail,\n  addOrderSuccess,\n  updateOrderSuccess,\n  updateOrderFail,\n  deleteOrderSuccess,\n  deleteOrderFail,\n  getProductDetailFail,\n  getProductDetailSuccess,\n  getProductsFail,\n  getProductsSuccess,\n  getShopsFail,\n  getShopsSuccess,\n  addCustomerFail,\n  addCustomerSuccess,\n  updateCustomerSuccess,\n  updateCustomerFail,\n  deleteCustomerSuccess,\n  deleteCustomerFail,\n} from \"./actions\"\n\n//Include Both Helper File with needed methods\nimport {\n  getCartData,\n  getCustomers,\n  getOrders,\n  addNewOrder,\n  updateOrder,\n  deleteOrder,\n  getProducts,\n  getShops,\n  getProductDetail,\n  addNewCustomer,\n  updateCustomer,\n  deleteCustomer\n} from \"helpers/fakebackend_helper\"\n\nfunction* fetchProducts() {\n  try {\n    const response = yield call(getProducts)\n    yield put(getProductsSuccess(response))\n  } catch (error) {\n    yield put(getProductsFail(error))\n  }\n}\n\nfunction* fetchProductDetail({ productId }) {\n  try {\n    const response = yield call(getProductDetail, productId)\n    yield put(getProductDetailSuccess(response))\n  } catch (error) {\n    yield put(getProductDetailFail(error))\n  }\n}\n\nfunction* fetchOrders() {\n  try {\n    const response = yield call(getOrders)\n    yield put(getOrdersSuccess(response))\n  } catch (error) {\n    yield put(getOrdersFail(error))\n  }\n}\n\nfunction* onAddNewOrder({ payload: order }) {\n  try {\n    const response = yield call(addNewOrder, order)\n    yield put(addOrderSuccess(response))\n  } catch (error) {\n\n    yield put(addOrderFail(error))\n  }\n}\n\nfunction* onUpdateOrder({ payload: order }) {\n  try {\n    const response = yield call(updateOrder, order)\n    yield put(updateOrderSuccess(response))\n  } catch (error) {\n    yield put(updateOrderFail(error))\n  }\n}\n\nfunction* onDeleteOrder({ payload: order }) {\n  try {\n    const response = yield call(deleteOrder, order)\n    yield put(deleteOrderSuccess(response))\n  } catch (error) {\n    yield put(deleteOrderFail(error))\n  }\n}\n\nfunction* fetchCartData() {\n  try {\n    const response = yield call(getCartData)\n    yield put(getCartDataSuccess(response))\n  } catch (error) {\n    yield put(getCartDataFail(error))\n  }\n}\n\nfunction* fetchCustomers() {\n  try {\n    const response = yield call(getCustomers)\n    yield put(getCustomersSuccess(response))\n  } catch (error) {\n    yield put(getCustomersFail(error))\n  }\n}\n\nfunction* fetchShops() {\n  try {\n    const response = yield call(getShops)\n    yield put(getShopsSuccess(response))\n  } catch (error) {\n    yield put(getShopsFail(error))\n  }\n}\n\nfunction* onAddNewCustomer({ payload: customer }) {\n  try {\n    const response = yield call(addNewCustomer, customer)\n    yield put(addCustomerSuccess(response))\n  } catch (error) {\n\n    yield put(addCustomerFail(error))\n  }\n}\n\nfunction* onUpdateCustomer({ payload: customer }) {\n  try {\n    const response = yield call(updateCustomer, customer)\n    yield put(updateCustomerSuccess(response))\n  } catch (error) {\n    yield put(updateCustomerFail(error))\n  }\n}\n\nfunction* onDeleteCustomer({ payload: customer }) {\n  try {\n    const response = yield call(deleteCustomer, customer)\n    yield put(deleteCustomerSuccess(response))\n  } catch (error) {\n    yield put(deleteCustomerFail(error))\n  }\n}\n\nfunction* ecommerceSaga() {\n  yield takeEvery(GET_PRODUCTS, fetchProducts)\n  yield takeEvery(GET_PRODUCT_DETAIL, fetchProductDetail)\n  yield takeEvery(GET_ORDERS, fetchOrders)\n  yield takeEvery(ADD_NEW_ORDER, onAddNewOrder)\n  yield takeEvery(UPDATE_ORDER, onUpdateOrder)\n  yield takeEvery(DELETE_ORDER, onDeleteOrder)\n  yield takeEvery(GET_CART_DATA, fetchCartData)\n  yield takeEvery(GET_CUSTOMERS, fetchCustomers)\n  yield takeEvery(GET_SHOPS, fetchShops)\n  yield takeEvery(ADD_NEW_CUSTOMER, onAddNewCustomer)\n  yield takeEvery(UPDATE_CUSTOMER, onUpdateCustomer)\n  yield takeEvery(DELETE_CUSTOMER, onDeleteCustomer)\n}\n\nexport default ecommerceSaga\n"]},"metadata":{},"sourceType":"module"}
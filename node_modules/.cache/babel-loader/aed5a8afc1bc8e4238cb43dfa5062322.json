{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../url_helper\";\nimport accessToken from \"../jwt-token-access/accessToken\";\nimport { calenderDefaultCategories, cartData, chats, comments, contacts, cryptoOrders, customerData, events, groups, invoiceList, messages, orders, productsData, projects, recentProducts, shops, tasks, userProfile, inboxmails, starredmails, importantmails, draftmails, sentmails, trashmails, users as members, wallet, yearData, monthData, weekData, janTopSellingData, decTopSellingData, novTopSellingData, octTopSellingData, janEarningData, decEarningData, novEarningData, octEarningData } from \"../../common/data\";\nlet users = [{\n  uid: 1,\n  username: \"admin\",\n  role: \"admin\",\n  password: \"123456\",\n  email: \"admin@themesbrand.com\"\n}];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios);\n  mock.onPost(\"/post-fake-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([\"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...validUser[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex; //Find index of specific object using findIndex method.\n\n            objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n            users[objIndex].username = user.username; // Assign a value to locastorage\n\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Updated successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex; //Find index of specific object using findIndex method.\n\n          objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n          users[objIndex].username = user.username; // Assign a value to locastorage\n\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Updated successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...user[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          resolve([200, productsData]);\n        } else {\n          reject([400, \"Cannot get products\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const product = productsData.find(product => product.id.toString() === params.id);\n          resolve([200, { ...product,\n            recentProducts,\n            comments\n          }]);\n        } else {\n          reject([400, \"Cannot get product detail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events]);\n        } else {\n          reject([400, \"Cannot get events\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot add event\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data]);\n        } else {\n          reject([400, \"Cannot add user\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data]);\n        } else {\n          reject([400, \"Cannot update user\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_USER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.user]);\n        } else {\n          reject([400, \"Cannot delete user\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot update event\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event]);\n        } else {\n          reject([400, \"Cannot delete event\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories]);\n        } else {\n          reject([400, \"Cannot get categories\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats]);\n        } else {\n          reject([400, \"Cannot get chats\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups]);\n        } else {\n          reject([400, \"Cannot get groups\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts]);\n        } else {\n          reject([400, \"Cannot get contacts\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const filteredMessages = messages.filter(msg => msg.roomId === params.roomId);\n          resolve([200, filteredMessages]);\n        } else {\n          reject([400, \"Cannot get messages\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data]);\n        } else {\n          reject([400, \"Cannot add message\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (orders) {\n          // Passing fake JSON data as response\n          resolve([200, orders]);\n        } else {\n          reject([400, \"Cannot get orders\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data]);\n        } else {\n          reject([400, \"Cannot add order\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data]);\n        } else {\n          reject([400, \"Cannot update order\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_ORDER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.order]);\n        } else {\n          reject([400, \"Cannot delete order\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CART_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cartData) {\n          // Passing fake JSON data as response\n          resolve([200, cartData]);\n        } else {\n          reject([400, \"Cannot get cart data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customerData) {\n          // Passing fake JSON data as response\n          resolve([200, customerData]);\n        } else {\n          reject([400, \"Cannot get customers data\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data]);\n        } else {\n          reject([400, \"Cannot add customer\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data]);\n        } else {\n          reject([400, \"Cannot update customer\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_CUSTOMER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.customer]);\n        } else {\n          reject([400, \"Cannot delete customer\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_SHOPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shops) {\n          // Passing fake JSON data as response\n          resolve([200, shops]);\n        } else {\n          reject([400, \"Cannot get shops data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_WALLET).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (wallet) {\n          // Passing fake JSON data as response\n          resolve([200, wallet]);\n        } else {\n          reject([400, \"Cannot get wallet data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CRYPTO_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cryptoOrders) {\n          // Passing fake JSON data as response\n          resolve([200, cryptoOrders]);\n        } else {\n          reject([400, \"Cannot get orders\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_INVOICES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          resolve([200, invoiceList]);\n        } else {\n          reject([400, \"Cannot get invoices\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_INVOICE_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const invoice = invoiceList.find(invoice => invoice.id.toString() === params.id.toString());\n          resolve([200, invoice]);\n        } else {\n          reject([400, \"Cannot get invoice\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_PROJECTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          resolve([200, projects]);\n        } else {\n          reject([400, \"Cannot get projects\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data]);\n        } else {\n          reject([400, \"Cannot add project\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data]);\n        } else {\n          reject([400, \"Cannot update project\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_PROJECT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.project]);\n        } else {\n          reject([400, \"Cannot delete project\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_STARRED_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (starredmails) {\n          // Passing fake JSON data as response\n          resolve([200, starredmails]);\n        } else {\n          reject([400, \"Cannot get starredmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_IMPORTANT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (importantmails) {\n          // Passing fake JSON data as response\n          resolve([200, importantmails]);\n        } else {\n          reject([400, \"Cannot get importantmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_TRASH_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (trashmails) {\n          // Passing fake JSON data as response\n          resolve([200, trashmails]);\n        } else {\n          reject([400, \"Cannot get trashmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_DRAFT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (draftmails) {\n          // Passing fake JSON data as response\n          resolve([200, draftmails]);\n        } else {\n          reject([400, \"Cannot get draftmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_SENT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (sentmails) {\n          // Passing fake JSON data as response\n          resolve([200, sentmails]);\n        } else {\n          reject([400, \"Cannot get sentmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_INBOX_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmails) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmails]);\n        } else {\n          reject([400, \"Cannot get inboxmails\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_INBOX_MAIL).reply(inboxmail => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmail && inboxmail.data) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmail.data]);\n        } else {\n          reject([400, \"Cannot add project\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_INBOX_MAIL).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.inboxmail]);\n        } else {\n          reject([400, \"Cannot delete inboxmail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_PROJECT_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const project = projects.find(project => project.id.toString() === params.id.toString());\n          resolve([200, project]);\n        } else {\n          reject([400, \"Cannot get project detail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks]);\n        } else {\n          reject([400, \"Cannot get tasks\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_USERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (members) {\n          // Passing fake JSON data as response\n          resolve([200, members]);\n        } else {\n          reject([400, \"Cannot get users\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_USER_PROFILE).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userProfile) {\n          // Passing fake JSON data as response\n          resolve([200, userProfile]);\n        } else {\n          reject([400, \"Cannot get user profile\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_WEEKLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (weekData) {\n          // Passing fake JSON data as response\n          resolve([200, weekData]);\n        } else {\n          reject([400, \"Cannot get wallet data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_YEARLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (yearData) {\n          // Passing fake JSON data as response\n          resolve([200, yearData]);\n        } else {\n          reject([400, \"Cannot get wallet data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_MONTHLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (monthData) {\n          // Passing fake JSON data as response\n          resolve([200, monthData]);\n        } else {\n          reject([400, \"Cannot get wallet data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.TOP_SELLING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const {\n        params\n      } = config;\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n          var data = [];\n\n          if (params.month === \"jan\") {\n            data = janTopSellingData;\n          } else if (params.month === \"dec\") {\n            data = decTopSellingData;\n          } else if (params.month === \"nov\") {\n            data = novTopSellingData;\n          } else if (params.month === \"oct\") {\n            data = octTopSellingData;\n          }\n\n          resolve([200, data]);\n        } else {\n          reject([400, \"Cannot get selling data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_EARNING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const {\n        params\n      } = config;\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          var data = [];\n\n          if (params.month === \"jan\") {\n            data = janEarningData;\n          } else if (params.month === \"dec\") {\n            data = decEarningData;\n          } else if (params.month === \"nov\") {\n            data = novEarningData;\n          } else if (params.month === \"oct\") {\n            data = octEarningData;\n          }\n\n          resolve([200, data]);\n        } else {\n          reject([400, \"Cannot get earning data\"]);\n        }\n      });\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["D:/localserver-php8/htdocs/react/realtyspace/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","accessToken","calenderDefaultCategories","cartData","chats","comments","contacts","cryptoOrders","customerData","events","groups","invoiceList","messages","orders","productsData","projects","recentProducts","shops","tasks","userProfile","inboxmails","starredmails","importantmails","draftmails","sentmails","trashmails","users","members","wallet","yearData","monthData","weekData","janTopSellingData","decTopSellingData","novTopSellingData","octTopSellingData","janEarningData","decEarningData","novEarningData","octEarningData","uid","username","role","password","email","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr","token","tokenObj","validUserObj","one","headers","finalToken","Authorization","idx","objIndex","findIndex","obj","localStorage","removeItem","setItem","stringify","onGet","GET_PRODUCTS","RegExp","GET_PRODUCTS_DETAIL","params","product","find","id","toString","GET_EVENTS","ADD_NEW_EVENT","event","data","ADD_NEW_USER","onPut","UPDATE_USER","onDelete","DELETE_USER","UPDATE_EVENT","DELETE_EVENT","GET_CATEGORIES","GET_CHATS","GET_GROUPS","GET_CONTACTS","GET_MESSAGES","filteredMessages","msg","roomId","ADD_MESSAGE","GET_ORDERS","ADD_NEW_ORDER","order","UPDATE_ORDER","DELETE_ORDER","GET_CART_DATA","GET_CUSTOMERS","ADD_NEW_CUSTOMER","customer","UPDATE_CUSTOMER","DELETE_CUSTOMER","GET_SHOPS","GET_WALLET","GET_CRYPTO_ORDERS","GET_INVOICES","GET_INVOICE_DETAIL","invoice","GET_PROJECTS","ADD_NEW_PROJECT","project","UPDATE_PROJECT","DELETE_PROJECT","GET_STARRED_MAILS","GET_IMPORTANT_MAILS","GET_TRASH_MAILS","GET_DRAFT_MAILS","GET_SENT_MAILS","GET_INBOX_MAILS","ADD_NEW_INBOX_MAIL","inboxmail","DELETE_INBOX_MAIL","GET_PROJECT_DETAIL","GET_TASKS","GET_USERS","GET_USER_PROFILE","GET_WEEKLY_DATA","GET_YEARLY_DATA","GET_MONTHLY_DATA","TOP_SELLING_DATA","month","GET_EARNING_DATA"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport MockAdapter from \"axios-mock-adapter\"\nimport * as url from \"../url_helper\"\nimport accessToken from \"../jwt-token-access/accessToken\"\nimport {\n  calenderDefaultCategories,\n  cartData,\n  chats,\n  comments,\n  contacts,\n  cryptoOrders,\n  customerData,\n  events,\n  groups,\n  invoiceList,\n  messages,\n  orders,\n  productsData,\n  projects,\n  recentProducts,\n  shops,\n  tasks,\n  userProfile,\n  inboxmails,\n  starredmails,\n  importantmails,\n  draftmails,\n  sentmails,\n  trashmails,\n  users as members,\n  wallet,\n  yearData,\n  monthData,\n  weekData,\n  janTopSellingData,\n  decTopSellingData,\n  novTopSellingData,\n  octTopSellingData,\n  janEarningData,\n  decEarningData,\n  novEarningData,\n  octEarningData\n} from \"../../common/data\"\n\nlet users = [\n  {\n    uid: 1,\n    username: \"admin\",\n    role: \"admin\",\n    password: \"123456\",\n    email: \"admin@themesbrand.com\",\n  },\n]\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios)\n\n  mock.onPost(\"/post-fake-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]])\n        } else {\n          reject([\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  });\n\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...validUser[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const one = config.headers\n\n    let finalToken = one.Authorization\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n            //Update object's name property.\n            users[objIndex].username = user.username\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\")\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n            resolve([200, \"Profile Updated successfully\"])\n          } else {\n            reject([400, \"Something wrong for edit profile\"])\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n          //Update object's name property.\n          users[objIndex].username = user.username\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\")\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n          resolve([200, \"Profile Updated successfully\"])\n        } else {\n          reject([400, \"Something wrong for edit profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...user[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          resolve([200, productsData])\n        } else {\n          reject([400, \"Cannot get products\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const product = productsData.find(\n            product => product.id.toString() === params.id\n          )\n          resolve([200, { ...product, recentProducts, comments }])\n        } else {\n          reject([400, \"Cannot get product detail\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events])\n        } else {\n          reject([400, \"Cannot get events\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot add event\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data])\n        } else {\n          reject([400, \"Cannot add user\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data])\n        } else {\n          reject([400, \"Cannot update user\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_USER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.user])\n        } else {\n          reject([400, \"Cannot delete user\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot update event\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event])\n        } else {\n          reject([400, \"Cannot delete event\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories])\n        } else {\n          reject([400, \"Cannot get categories\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats])\n        } else {\n          reject([400, \"Cannot get chats\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups])\n        } else {\n          reject([400, \"Cannot get groups\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts])\n        } else {\n          reject([400, \"Cannot get contacts\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const filteredMessages = messages.filter(\n            msg => msg.roomId === params.roomId\n          )\n          resolve([200, filteredMessages])\n        } else {\n          reject([400, \"Cannot get messages\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data])\n        } else {\n          reject([400, \"Cannot add message\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (orders) {\n          // Passing fake JSON data as response\n          resolve([200, orders])\n        } else {\n          reject([400, \"Cannot get orders\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data])\n        } else {\n          reject([400, \"Cannot add order\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data])\n        } else {\n          reject([400, \"Cannot update order\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_ORDER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.order])\n        } else {\n          reject([400, \"Cannot delete order\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CART_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cartData) {\n          // Passing fake JSON data as response\n          resolve([200, cartData])\n        } else {\n          reject([400, \"Cannot get cart data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customerData) {\n          // Passing fake JSON data as response\n          resolve([200, customerData])\n        } else {\n          reject([400, \"Cannot get customers data\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data])\n        } else {\n          reject([400, \"Cannot add customer\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data])\n        } else {\n          reject([400, \"Cannot update customer\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_CUSTOMER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.customer])\n        } else {\n          reject([400, \"Cannot delete customer\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_SHOPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shops) {\n          // Passing fake JSON data as response\n          resolve([200, shops])\n        } else {\n          reject([400, \"Cannot get shops data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_WALLET).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (wallet) {\n          // Passing fake JSON data as response\n          resolve([200, wallet])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CRYPTO_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cryptoOrders) {\n          // Passing fake JSON data as response\n          resolve([200, cryptoOrders])\n        } else {\n          reject([400, \"Cannot get orders\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_INVOICES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          resolve([200, invoiceList])\n        } else {\n          reject([400, \"Cannot get invoices\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_INVOICE_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const invoice = invoiceList.find(\n            invoice => invoice.id.toString() === params.id.toString()\n          )\n          resolve([200, invoice])\n        } else {\n          reject([400, \"Cannot get invoice\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_PROJECTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          resolve([200, projects])\n        } else {\n          reject([400, \"Cannot get projects\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data])\n        } else {\n          reject([400, \"Cannot add project\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data])\n        } else {\n          reject([400, \"Cannot update project\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_PROJECT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.project])\n        } else {\n          reject([400, \"Cannot delete project\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_STARRED_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (starredmails) {\n          // Passing fake JSON data as response\n          resolve([200, starredmails])\n        } else {\n          reject([400, \"Cannot get starredmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_IMPORTANT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (importantmails) {\n          // Passing fake JSON data as response\n          resolve([200, importantmails])\n        } else {\n          reject([400, \"Cannot get importantmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_TRASH_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (trashmails) {\n          // Passing fake JSON data as response\n          resolve([200, trashmails])\n        } else {\n          reject([400, \"Cannot get trashmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_DRAFT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (draftmails) {\n          // Passing fake JSON data as response\n          resolve([200, draftmails])\n        } else {\n          reject([400, \"Cannot get draftmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_SENT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (sentmails) {\n          // Passing fake JSON data as response\n          resolve([200, sentmails])\n        } else {\n          reject([400, \"Cannot get sentmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_INBOX_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmails) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmails])\n        } else {\n          reject([400, \"Cannot get inboxmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_INBOX_MAIL).reply(inboxmail => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmail && inboxmail.data) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmail.data])\n        } else {\n          reject([400, \"Cannot add project\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_INBOX_MAIL).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.inboxmail])\n        } else {\n          reject([400, \"Cannot delete inboxmail\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_PROJECT_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const project = projects.find(\n            project => project.id.toString() === params.id.toString()\n          )\n          resolve([200, project])\n        } else {\n          reject([400, \"Cannot get project detail\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks])\n        } else {\n          reject([400, \"Cannot get tasks\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_USERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (members) {\n          // Passing fake JSON data as response\n          resolve([200, members])\n        } else {\n          reject([400, \"Cannot get users\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_USER_PROFILE).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userProfile) {\n          // Passing fake JSON data as response\n          resolve([200, userProfile])\n        } else {\n          reject([400, \"Cannot get user profile\"])\n        }\n      })\n    })\n  });\n\n  mock.onGet(url.GET_WEEKLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (weekData) {\n          // Passing fake JSON data as response\n          resolve([200, weekData])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  });\n\n  mock.onGet(url.GET_YEARLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (yearData) {\n          // Passing fake JSON data as response\n          resolve([200, yearData])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  });\n\n  mock.onGet(url.GET_MONTHLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (monthData) {\n          // Passing fake JSON data as response\n          resolve([200, monthData])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  });\n\n  mock.onGet(new RegExp(`${url.TOP_SELLING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const { params } = config\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n\n          var data = [];\n          if (params.month === \"jan\") {\n            data = janTopSellingData\n\n          } else if (params.month === \"dec\") {\n            data = decTopSellingData\n\n          }\n          else if (params.month === \"nov\") {\n            data = novTopSellingData\n\n          }\n          else if (params.month === \"oct\") {\n            data = octTopSellingData\n\n          }\n          resolve([200, data])\n        } else {\n          reject([400, \"Cannot get selling data\"])\n        }\n      });\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.GET_EARNING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const { params } = config\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n          const { params } = config\n          var data = [];\n          if (params.month === \"jan\") {\n            data = janEarningData\n\n          } else if (params.month === \"dec\") {\n            data = decEarningData\n\n          }\n          else if (params.month === \"nov\") {\n            data = novEarningData\n\n          }\n          else if (params.month === \"oct\") {\n            data = octEarningData\n\n          }\n          resolve([200, data])\n        } else {\n          reject([400, \"Cannot get earning data\"])\n        }\n      });\n    });\n  });\n}\n\nexport default fakeBackend\n"]},"metadata":{},"sourceType":"module"}
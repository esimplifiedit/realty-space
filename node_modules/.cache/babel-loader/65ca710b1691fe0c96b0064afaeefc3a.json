{"ast":null,"code":"import _objectSpread from\"D:/localserver-php8/htdocs/react/realtyspace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import axios from\"axios\";import MockAdapter from\"axios-mock-adapter\";import*as url from\"../url_helper\";import accessToken from\"../jwt-token-access/accessToken\";import{calenderDefaultCategories,cartData,chats,comments,contacts,cryptoOrders,customerData,events,groups,invoiceList,messages,orders,productsData,projects,recentProducts,shops,tasks,userProfile,inboxmails,starredmails,importantmails,draftmails,sentmails,trashmails,users as members,wallet,yearData,monthData,weekData,janTopSellingData,decTopSellingData,novTopSellingData,octTopSellingData,janEarningData,decEarningData,novEarningData,octEarningData}from\"../../common/data\";var users=[{uid:1,username:\"admin\",role:\"admin\",password:\"123456\",email:\"admin@themesbrand.com\"}];var fakeBackend=function fakeBackend(){// This sets the mock adapter on the default instance\nvar mock=new MockAdapter(axios);mock.onPost(\"/post-fake-register\").reply(function(config){var user=JSON.parse(config[\"data\"]);users.push(user);return new Promise(function(resolve,reject){setTimeout(function(){resolve([200,user]);});});});mock.onPost(\"/post-fake-login\").reply(function(config){var user=JSON.parse(config[\"data\"]);var validUser=users.filter(function(usr){return usr.email===user.email&&usr.password===user.password;});return new Promise(function(resolve,reject){setTimeout(function(){if(validUser[\"length\"]===1){resolve([200,validUser[0]]);}else{reject([\"Username and password are invalid. Please enter correct username and password\"]);}});});});mock.onPost(\"/fake-forget-pwd\").reply(function(config){// User needs to check that user is eXist or not and send mail for Reset New password\nreturn new Promise(function(resolve,reject){setTimeout(function(){resolve([200,\"Check you mail and reset your password.\"]);});});});mock.onPost(\"/post-jwt-register\").reply(function(config){var user=JSON.parse(config[\"data\"]);users.push(user);return new Promise(function(resolve,reject){setTimeout(function(){resolve([200,user]);});});});mock.onPost(\"/post-jwt-login\").reply(function(config){var user=JSON.parse(config[\"data\"]);var validUser=users.filter(function(usr){return usr.email===user.email&&usr.password===user.password;});return new Promise(function(resolve,reject){setTimeout(function(){if(validUser[\"length\"]===1){// You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\nvar token=accessToken;// JWT AccessToken\nvar tokenObj={accessToken:token};// Token Obj\nvar validUserObj=_objectSpread(_objectSpread({},validUser[0]),tokenObj);// validUser Obj\nresolve([200,validUserObj]);}else{reject([400,\"Username and password are invalid. Please enter correct username and password\"]);}});});});mock.onPost(\"/post-jwt-profile\").reply(function(config){var user=JSON.parse(config[\"data\"]);var one=config.headers;var finalToken=one.Authorization;var validUser=users.filter(function(usr){return usr.uid===user.idx;});return new Promise(function(resolve,reject){setTimeout(function(){// Verify Jwt token from header.Authorization\nif(finalToken===accessToken){if(validUser[\"length\"]===1){var objIndex;//Find index of specific object using findIndex method.\nobjIndex=users.findIndex(function(obj){return obj.uid===user.idx;});//Update object's name property.\nusers[objIndex].username=user.username;// Assign a value to locastorage\nlocalStorage.removeItem(\"authUser\");localStorage.setItem(\"authUser\",JSON.stringify(users[objIndex]));resolve([200,\"Profile Updated successfully\"]);}else{reject([400,\"Something wrong for edit profile\"]);}}else{reject([400,\"Invalid Token !!\"]);}});});});mock.onPost(\"/post-fake-profile\").reply(function(config){var user=JSON.parse(config[\"data\"]);var validUser=users.filter(function(usr){return usr.uid===user.idx;});return new Promise(function(resolve,reject){setTimeout(function(){if(validUser[\"length\"]===1){var objIndex;//Find index of specific object using findIndex method.\nobjIndex=users.findIndex(function(obj){return obj.uid===user.idx;});//Update object's name property.\nusers[objIndex].username=user.username;// Assign a value to locastorage\nlocalStorage.removeItem(\"authUser\");localStorage.setItem(\"authUser\",JSON.stringify(users[objIndex]));resolve([200,\"Profile Updated successfully\"]);}else{reject([400,\"Something wrong for edit profile\"]);}});});});mock.onPost(\"/jwt-forget-pwd\").reply(function(config){// User needs to check that user is eXist or not and send mail for Reset New password\nreturn new Promise(function(resolve,reject){setTimeout(function(){resolve([200,\"Check you mail and reset your password.\"]);});});});mock.onPost(\"/social-login\").reply(function(config){var user=JSON.parse(config[\"data\"]);return new Promise(function(resolve,reject){setTimeout(function(){if(user&&user.token){// You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\nvar token=accessToken;// JWT AccessToken\nvar tokenObj={accessToken:token};// Token Obj\nvar validUserObj=_objectSpread(_objectSpread({},user[0]),tokenObj);// validUser Obj\nresolve([200,validUserObj]);}else{reject([400,\"Username and password are invalid. Please enter correct username and password\"]);}});});});mock.onGet(url.GET_PRODUCTS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(productsData){// Passing fake JSON data as response\nresolve([200,productsData]);}else{reject([400,\"Cannot get products\"]);}});});});mock.onGet(new RegExp(\"\".concat(url.GET_PRODUCTS_DETAIL,\"/*\"))).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(productsData){// Passing fake JSON data as response\nvar params=config.params;var product=productsData.find(function(product){return product.id.toString()===params.id;});resolve([200,_objectSpread(_objectSpread({},product),{},{recentProducts:recentProducts,comments:comments})]);}else{reject([400,\"Cannot get product detail\"]);}});});});mock.onGet(url.GET_EVENTS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(events){// Passing fake JSON data as response\nresolve([200,events]);}else{reject([400,\"Cannot get events\"]);}});});});mock.onPost(url.ADD_NEW_EVENT).reply(function(event){return new Promise(function(resolve,reject){setTimeout(function(){if(event&&event.data){// Passing fake JSON data as response\nresolve([200,event.data]);}else{reject([400,\"Cannot add event\"]);}});});});mock.onPost(url.ADD_NEW_USER).reply(function(user){return new Promise(function(resolve,reject){setTimeout(function(){if(user&&user.data){// Passing fake JSON data as response\nresolve([200,user.data]);}else{reject([400,\"Cannot add user\"]);}});});});mock.onPut(url.UPDATE_USER).reply(function(user){return new Promise(function(resolve,reject){setTimeout(function(){if(user&&user.data){// Passing fake JSON data as response\nresolve([200,user.data]);}else{reject([400,\"Cannot update user\"]);}});});});mock.onDelete(url.DELETE_USER).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config&&config.headers){// Passing fake JSON data as response\nresolve([200,config.headers.user]);}else{reject([400,\"Cannot delete user\"]);}});});});mock.onPut(url.UPDATE_EVENT).reply(function(event){return new Promise(function(resolve,reject){setTimeout(function(){if(event&&event.data){// Passing fake JSON data as response\nresolve([200,event.data]);}else{reject([400,\"Cannot update event\"]);}});});});mock.onDelete(url.DELETE_EVENT).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config&&config.headers){// Passing fake JSON data as response\nresolve([200,config.headers.event]);}else{reject([400,\"Cannot delete event\"]);}});});});mock.onGet(url.GET_CATEGORIES).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(calenderDefaultCategories){// Passing fake JSON data as response\nresolve([200,calenderDefaultCategories]);}else{reject([400,\"Cannot get categories\"]);}});});});mock.onGet(url.GET_CHATS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(chats){// Passing fake JSON data as response\nresolve([200,chats]);}else{reject([400,\"Cannot get chats\"]);}});});});mock.onGet(url.GET_GROUPS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(groups){// Passing fake JSON data as response\nresolve([200,groups]);}else{reject([400,\"Cannot get groups\"]);}});});});mock.onGet(url.GET_CONTACTS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(contacts){// Passing fake JSON data as response\nresolve([200,contacts]);}else{reject([400,\"Cannot get contacts\"]);}});});});mock.onGet(new RegExp(\"\".concat(url.GET_MESSAGES,\"/*\"))).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(messages){// Passing fake JSON data as response\nvar params=config.params;var filteredMessages=messages.filter(function(msg){return msg.roomId===params.roomId;});resolve([200,filteredMessages]);}else{reject([400,\"Cannot get messages\"]);}});});});mock.onPost(url.ADD_MESSAGE).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config.data){// Passing fake JSON data as response\nresolve([200,config.data]);}else{reject([400,\"Cannot add message\"]);}});});});mock.onGet(url.GET_ORDERS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(orders){// Passing fake JSON data as response\nresolve([200,orders]);}else{reject([400,\"Cannot get orders\"]);}});});});mock.onPost(url.ADD_NEW_ORDER).reply(function(order){return new Promise(function(resolve,reject){setTimeout(function(){if(order&&order.data){// Passing fake JSON data as response\nresolve([200,order.data]);}else{reject([400,\"Cannot add order\"]);}});});});mock.onPut(url.UPDATE_ORDER).reply(function(order){return new Promise(function(resolve,reject){setTimeout(function(){if(order&&order.data){// Passing fake JSON data as response\nresolve([200,order.data]);}else{reject([400,\"Cannot update order\"]);}});});});mock.onDelete(url.DELETE_ORDER).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config&&config.headers){// Passing fake JSON data as response\nresolve([200,config.headers.order]);}else{reject([400,\"Cannot delete order\"]);}});});});mock.onGet(url.GET_CART_DATA).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(cartData){// Passing fake JSON data as response\nresolve([200,cartData]);}else{reject([400,\"Cannot get cart data\"]);}});});});mock.onGet(url.GET_CUSTOMERS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(customerData){// Passing fake JSON data as response\nresolve([200,customerData]);}else{reject([400,\"Cannot get customers data\"]);}});});});mock.onPost(url.ADD_NEW_CUSTOMER).reply(function(customer){return new Promise(function(resolve,reject){setTimeout(function(){if(customer&&customer.data){// Passing fake JSON data as response\nresolve([200,customer.data]);}else{reject([400,\"Cannot add customer\"]);}});});});mock.onPut(url.UPDATE_CUSTOMER).reply(function(customer){return new Promise(function(resolve,reject){setTimeout(function(){if(customer&&customer.data){// Passing fake JSON data as response\nresolve([200,customer.data]);}else{reject([400,\"Cannot update customer\"]);}});});});mock.onDelete(url.DELETE_CUSTOMER).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config&&config.headers){// Passing fake JSON data as response\nresolve([200,config.headers.customer]);}else{reject([400,\"Cannot delete customer\"]);}});});});mock.onGet(url.GET_SHOPS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(shops){// Passing fake JSON data as response\nresolve([200,shops]);}else{reject([400,\"Cannot get shops data\"]);}});});});mock.onGet(url.GET_WALLET).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(wallet){// Passing fake JSON data as response\nresolve([200,wallet]);}else{reject([400,\"Cannot get wallet data\"]);}});});});mock.onGet(url.GET_CRYPTO_ORDERS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(cryptoOrders){// Passing fake JSON data as response\nresolve([200,cryptoOrders]);}else{reject([400,\"Cannot get orders\"]);}});});});mock.onGet(url.GET_INVOICES).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(invoiceList){// Passing fake JSON data as response\nresolve([200,invoiceList]);}else{reject([400,\"Cannot get invoices\"]);}});});});mock.onGet(new RegExp(\"\".concat(url.GET_INVOICE_DETAIL,\"/*\"))).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(invoiceList){// Passing fake JSON data as response\nvar params=config.params;var invoice=invoiceList.find(function(invoice){return invoice.id.toString()===params.id.toString();});resolve([200,invoice]);}else{reject([400,\"Cannot get invoice\"]);}});});});mock.onGet(url.GET_PROJECTS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(projects){// Passing fake JSON data as response\nresolve([200,projects]);}else{reject([400,\"Cannot get projects\"]);}});});});mock.onPost(url.ADD_NEW_PROJECT).reply(function(project){return new Promise(function(resolve,reject){setTimeout(function(){if(project&&project.data){// Passing fake JSON data as response\nresolve([200,project.data]);}else{reject([400,\"Cannot add project\"]);}});});});mock.onPut(url.UPDATE_PROJECT).reply(function(project){return new Promise(function(resolve,reject){setTimeout(function(){if(project&&project.data){// Passing fake JSON data as response\nresolve([200,project.data]);}else{reject([400,\"Cannot update project\"]);}});});});mock.onDelete(url.DELETE_PROJECT).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config&&config.headers){// Passing fake JSON data as response\nresolve([200,config.headers.project]);}else{reject([400,\"Cannot delete project\"]);}});});});mock.onGet(url.GET_STARRED_MAILS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(starredmails){// Passing fake JSON data as response\nresolve([200,starredmails]);}else{reject([400,\"Cannot get starredmails\"]);}});});});mock.onGet(url.GET_IMPORTANT_MAILS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(importantmails){// Passing fake JSON data as response\nresolve([200,importantmails]);}else{reject([400,\"Cannot get importantmails\"]);}});});});mock.onGet(url.GET_TRASH_MAILS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(trashmails){// Passing fake JSON data as response\nresolve([200,trashmails]);}else{reject([400,\"Cannot get trashmails\"]);}});});});mock.onGet(url.GET_DRAFT_MAILS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(draftmails){// Passing fake JSON data as response\nresolve([200,draftmails]);}else{reject([400,\"Cannot get draftmails\"]);}});});});mock.onGet(url.GET_SENT_MAILS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(sentmails){// Passing fake JSON data as response\nresolve([200,sentmails]);}else{reject([400,\"Cannot get sentmails\"]);}});});});mock.onGet(url.GET_INBOX_MAILS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(inboxmails){// Passing fake JSON data as response\nresolve([200,inboxmails]);}else{reject([400,\"Cannot get inboxmails\"]);}});});});mock.onPost(url.ADD_NEW_INBOX_MAIL).reply(function(inboxmail){return new Promise(function(resolve,reject){setTimeout(function(){if(inboxmail&&inboxmail.data){// Passing fake JSON data as response\nresolve([200,inboxmail.data]);}else{reject([400,\"Cannot add project\"]);}});});});mock.onDelete(url.DELETE_INBOX_MAIL).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config&&config.headers){// Passing fake JSON data as response\nresolve([200,config.headers.inboxmail]);}else{reject([400,\"Cannot delete inboxmail\"]);}});});});mock.onGet(new RegExp(\"\".concat(url.GET_PROJECT_DETAIL,\"/*\"))).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(projects){// Passing fake JSON data as response\nvar params=config.params;var project=projects.find(function(project){return project.id.toString()===params.id.toString();});resolve([200,project]);}else{reject([400,\"Cannot get project detail\"]);}});});});mock.onGet(url.GET_TASKS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(tasks){// Passing fake JSON data as response\nresolve([200,tasks]);}else{reject([400,\"Cannot get tasks\"]);}});});});mock.onGet(url.GET_USERS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(members){// Passing fake JSON data as response\nresolve([200,members]);}else{reject([400,\"Cannot get users\"]);}});});});mock.onGet(url.GET_USER_PROFILE).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(userProfile){// Passing fake JSON data as response\nresolve([200,userProfile]);}else{reject([400,\"Cannot get user profile\"]);}});});});mock.onGet(url.GET_WEEKLY_DATA).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(weekData){// Passing fake JSON data as response\nresolve([200,weekData]);}else{reject([400,\"Cannot get wallet data\"]);}});});});mock.onGet(url.GET_YEARLY_DATA).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(yearData){// Passing fake JSON data as response\nresolve([200,yearData]);}else{reject([400,\"Cannot get wallet data\"]);}});});});mock.onGet(url.GET_MONTHLY_DATA).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(monthData){// Passing fake JSON data as response\nresolve([200,monthData]);}else{reject([400,\"Cannot get wallet data\"]);}});});});mock.onGet(new RegExp(\"\".concat(url.TOP_SELLING_DATA,\"/*\"))).reply(function(config){return new Promise(function(resolve,reject){var params=config.params;setTimeout(function(){if(params&&params.month){// Passing fake JSON data as response\nvar data=[];if(params.month===\"jan\"){data=janTopSellingData;}else if(params.month===\"dec\"){data=decTopSellingData;}else if(params.month===\"nov\"){data=novTopSellingData;}else if(params.month===\"oct\"){data=octTopSellingData;}resolve([200,data]);}else{reject([400,\"Cannot get selling data\"]);}});});});mock.onGet(new RegExp(\"\".concat(url.GET_EARNING_DATA,\"/*\"))).reply(function(config){return new Promise(function(resolve,reject){var params=config.params;setTimeout(function(){if(params&&params.month){// Passing fake JSON data as response\nvar _params=config.params;var data=[];if(_params.month===\"jan\"){data=janEarningData;}else if(_params.month===\"dec\"){data=decEarningData;}else if(_params.month===\"nov\"){data=novEarningData;}else if(_params.month===\"oct\"){data=octEarningData;}resolve([200,data]);}else{reject([400,\"Cannot get earning data\"]);}});});});};export default fakeBackend;","map":{"version":3,"sources":["D:/localserver-php8/htdocs/react/realtyspace/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","accessToken","calenderDefaultCategories","cartData","chats","comments","contacts","cryptoOrders","customerData","events","groups","invoiceList","messages","orders","productsData","projects","recentProducts","shops","tasks","userProfile","inboxmails","starredmails","importantmails","draftmails","sentmails","trashmails","users","members","wallet","yearData","monthData","weekData","janTopSellingData","decTopSellingData","novTopSellingData","octTopSellingData","janEarningData","decEarningData","novEarningData","octEarningData","uid","username","role","password","email","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr","token","tokenObj","validUserObj","one","headers","finalToken","Authorization","idx","objIndex","findIndex","obj","localStorage","removeItem","setItem","stringify","onGet","GET_PRODUCTS","RegExp","GET_PRODUCTS_DETAIL","params","product","find","id","toString","GET_EVENTS","ADD_NEW_EVENT","event","data","ADD_NEW_USER","onPut","UPDATE_USER","onDelete","DELETE_USER","UPDATE_EVENT","DELETE_EVENT","GET_CATEGORIES","GET_CHATS","GET_GROUPS","GET_CONTACTS","GET_MESSAGES","filteredMessages","msg","roomId","ADD_MESSAGE","GET_ORDERS","ADD_NEW_ORDER","order","UPDATE_ORDER","DELETE_ORDER","GET_CART_DATA","GET_CUSTOMERS","ADD_NEW_CUSTOMER","customer","UPDATE_CUSTOMER","DELETE_CUSTOMER","GET_SHOPS","GET_WALLET","GET_CRYPTO_ORDERS","GET_INVOICES","GET_INVOICE_DETAIL","invoice","GET_PROJECTS","ADD_NEW_PROJECT","project","UPDATE_PROJECT","DELETE_PROJECT","GET_STARRED_MAILS","GET_IMPORTANT_MAILS","GET_TRASH_MAILS","GET_DRAFT_MAILS","GET_SENT_MAILS","GET_INBOX_MAILS","ADD_NEW_INBOX_MAIL","inboxmail","DELETE_INBOX_MAIL","GET_PROJECT_DETAIL","GET_TASKS","GET_USERS","GET_USER_PROFILE","GET_WEEKLY_DATA","GET_YEARLY_DATA","GET_MONTHLY_DATA","TOP_SELLING_DATA","month","GET_EARNING_DATA"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport MockAdapter from \"axios-mock-adapter\"\nimport * as url from \"../url_helper\"\nimport accessToken from \"../jwt-token-access/accessToken\"\nimport {\n  calenderDefaultCategories,\n  cartData,\n  chats,\n  comments,\n  contacts,\n  cryptoOrders,\n  customerData,\n  events,\n  groups,\n  invoiceList,\n  messages,\n  orders,\n  productsData,\n  projects,\n  recentProducts,\n  shops,\n  tasks,\n  userProfile,\n  inboxmails,\n  starredmails,\n  importantmails,\n  draftmails,\n  sentmails,\n  trashmails,\n  users as members,\n  wallet,\n  yearData,\n  monthData,\n  weekData,\n  janTopSellingData,\n  decTopSellingData,\n  novTopSellingData,\n  octTopSellingData,\n  janEarningData,\n  decEarningData,\n  novEarningData,\n  octEarningData\n} from \"../../common/data\"\n\nlet users = [\n  {\n    uid: 1,\n    username: \"admin\",\n    role: \"admin\",\n    password: \"123456\",\n    email: \"admin@themesbrand.com\",\n  },\n]\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios)\n\n  mock.onPost(\"/post-fake-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]])\n        } else {\n          reject([\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  });\n\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...validUser[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const one = config.headers\n\n    let finalToken = one.Authorization\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n            //Update object's name property.\n            users[objIndex].username = user.username\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\")\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n            resolve([200, \"Profile Updated successfully\"])\n          } else {\n            reject([400, \"Something wrong for edit profile\"])\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n          //Update object's name property.\n          users[objIndex].username = user.username\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\")\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n          resolve([200, \"Profile Updated successfully\"])\n        } else {\n          reject([400, \"Something wrong for edit profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...user[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          resolve([200, productsData])\n        } else {\n          reject([400, \"Cannot get products\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const product = productsData.find(\n            product => product.id.toString() === params.id\n          )\n          resolve([200, { ...product, recentProducts, comments }])\n        } else {\n          reject([400, \"Cannot get product detail\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events])\n        } else {\n          reject([400, \"Cannot get events\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot add event\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data])\n        } else {\n          reject([400, \"Cannot add user\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data])\n        } else {\n          reject([400, \"Cannot update user\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_USER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.user])\n        } else {\n          reject([400, \"Cannot delete user\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot update event\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event])\n        } else {\n          reject([400, \"Cannot delete event\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories])\n        } else {\n          reject([400, \"Cannot get categories\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats])\n        } else {\n          reject([400, \"Cannot get chats\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups])\n        } else {\n          reject([400, \"Cannot get groups\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts])\n        } else {\n          reject([400, \"Cannot get contacts\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const filteredMessages = messages.filter(\n            msg => msg.roomId === params.roomId\n          )\n          resolve([200, filteredMessages])\n        } else {\n          reject([400, \"Cannot get messages\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data])\n        } else {\n          reject([400, \"Cannot add message\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (orders) {\n          // Passing fake JSON data as response\n          resolve([200, orders])\n        } else {\n          reject([400, \"Cannot get orders\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data])\n        } else {\n          reject([400, \"Cannot add order\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data])\n        } else {\n          reject([400, \"Cannot update order\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_ORDER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.order])\n        } else {\n          reject([400, \"Cannot delete order\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CART_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cartData) {\n          // Passing fake JSON data as response\n          resolve([200, cartData])\n        } else {\n          reject([400, \"Cannot get cart data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customerData) {\n          // Passing fake JSON data as response\n          resolve([200, customerData])\n        } else {\n          reject([400, \"Cannot get customers data\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data])\n        } else {\n          reject([400, \"Cannot add customer\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data])\n        } else {\n          reject([400, \"Cannot update customer\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_CUSTOMER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.customer])\n        } else {\n          reject([400, \"Cannot delete customer\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_SHOPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shops) {\n          // Passing fake JSON data as response\n          resolve([200, shops])\n        } else {\n          reject([400, \"Cannot get shops data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_WALLET).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (wallet) {\n          // Passing fake JSON data as response\n          resolve([200, wallet])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CRYPTO_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cryptoOrders) {\n          // Passing fake JSON data as response\n          resolve([200, cryptoOrders])\n        } else {\n          reject([400, \"Cannot get orders\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_INVOICES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          resolve([200, invoiceList])\n        } else {\n          reject([400, \"Cannot get invoices\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_INVOICE_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const invoice = invoiceList.find(\n            invoice => invoice.id.toString() === params.id.toString()\n          )\n          resolve([200, invoice])\n        } else {\n          reject([400, \"Cannot get invoice\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_PROJECTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          resolve([200, projects])\n        } else {\n          reject([400, \"Cannot get projects\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data])\n        } else {\n          reject([400, \"Cannot add project\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data])\n        } else {\n          reject([400, \"Cannot update project\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_PROJECT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.project])\n        } else {\n          reject([400, \"Cannot delete project\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_STARRED_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (starredmails) {\n          // Passing fake JSON data as response\n          resolve([200, starredmails])\n        } else {\n          reject([400, \"Cannot get starredmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_IMPORTANT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (importantmails) {\n          // Passing fake JSON data as response\n          resolve([200, importantmails])\n        } else {\n          reject([400, \"Cannot get importantmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_TRASH_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (trashmails) {\n          // Passing fake JSON data as response\n          resolve([200, trashmails])\n        } else {\n          reject([400, \"Cannot get trashmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_DRAFT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (draftmails) {\n          // Passing fake JSON data as response\n          resolve([200, draftmails])\n        } else {\n          reject([400, \"Cannot get draftmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_SENT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (sentmails) {\n          // Passing fake JSON data as response\n          resolve([200, sentmails])\n        } else {\n          reject([400, \"Cannot get sentmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_INBOX_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmails) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmails])\n        } else {\n          reject([400, \"Cannot get inboxmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_INBOX_MAIL).reply(inboxmail => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmail && inboxmail.data) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmail.data])\n        } else {\n          reject([400, \"Cannot add project\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_INBOX_MAIL).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.inboxmail])\n        } else {\n          reject([400, \"Cannot delete inboxmail\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_PROJECT_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const project = projects.find(\n            project => project.id.toString() === params.id.toString()\n          )\n          resolve([200, project])\n        } else {\n          reject([400, \"Cannot get project detail\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks])\n        } else {\n          reject([400, \"Cannot get tasks\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_USERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (members) {\n          // Passing fake JSON data as response\n          resolve([200, members])\n        } else {\n          reject([400, \"Cannot get users\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_USER_PROFILE).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userProfile) {\n          // Passing fake JSON data as response\n          resolve([200, userProfile])\n        } else {\n          reject([400, \"Cannot get user profile\"])\n        }\n      })\n    })\n  });\n\n  mock.onGet(url.GET_WEEKLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (weekData) {\n          // Passing fake JSON data as response\n          resolve([200, weekData])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  });\n\n  mock.onGet(url.GET_YEARLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (yearData) {\n          // Passing fake JSON data as response\n          resolve([200, yearData])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  });\n\n  mock.onGet(url.GET_MONTHLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (monthData) {\n          // Passing fake JSON data as response\n          resolve([200, monthData])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  });\n\n  mock.onGet(new RegExp(`${url.TOP_SELLING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const { params } = config\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n\n          var data = [];\n          if (params.month === \"jan\") {\n            data = janTopSellingData\n\n          } else if (params.month === \"dec\") {\n            data = decTopSellingData\n\n          }\n          else if (params.month === \"nov\") {\n            data = novTopSellingData\n\n          }\n          else if (params.month === \"oct\") {\n            data = octTopSellingData\n\n          }\n          resolve([200, data])\n        } else {\n          reject([400, \"Cannot get selling data\"])\n        }\n      });\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.GET_EARNING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const { params } = config\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n          const { params } = config\n          var data = [];\n          if (params.month === \"jan\") {\n            data = janEarningData\n\n          } else if (params.month === \"dec\") {\n            data = decEarningData\n\n          }\n          else if (params.month === \"nov\") {\n            data = novEarningData\n\n          }\n          else if (params.month === \"oct\") {\n            data = octEarningData\n\n          }\n          resolve([200, data])\n        } else {\n          reject([400, \"Cannot get earning data\"])\n        }\n      });\n    });\n  });\n}\n\nexport default fakeBackend\n"]},"metadata":{},"sourceType":"module"}
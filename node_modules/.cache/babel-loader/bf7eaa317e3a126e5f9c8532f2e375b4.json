{"ast":null,"code":"import { GET_CART_DATA_FAIL, GET_CART_DATA_SUCCESS, GET_CUSTOMERS_FAIL, GET_CUSTOMERS_SUCCESS, GET_ORDERS_FAIL, GET_ORDERS_SUCCESS, ADD_ORDER_SUCCESS, ADD_ORDER_FAIL, UPDATE_ORDER_SUCCESS, UPDATE_ORDER_FAIL, DELETE_ORDER_SUCCESS, DELETE_ORDER_FAIL, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS, GET_SHOPS_FAIL, GET_SHOPS_SUCCESS, GET_PRODUCT_DETAIL_SUCCESS, GET_PRODUCT_DETAIL_FAIL, ADD_CUSTOMER_SUCCESS, ADD_CUSTOMER_FAIL, UPDATE_CUSTOMER_SUCCESS, UPDATE_CUSTOMER_FAIL, DELETE_CUSTOMER_SUCCESS, DELETE_CUSTOMER_FAIL } from \"./actionTypes\";\nconst INIT_STATE = {\n  products: [],\n  product: {},\n  orders: [],\n  cartData: {},\n  customers: [],\n  shops: [],\n  error: {}\n};\n\nconst Ecommerce = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_PRODUCTS_SUCCESS:\n      return { ...state,\n        products: action.payload\n      };\n\n    case GET_PRODUCTS_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_PRODUCT_DETAIL_SUCCESS:\n      return { ...state,\n        product: action.payload\n      };\n\n    case GET_PRODUCT_DETAIL_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_ORDERS_SUCCESS:\n      return { ...state,\n        orders: action.payload\n      };\n\n    case GET_ORDERS_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case ADD_ORDER_SUCCESS:\n      return { ...state,\n        orders: [...state.orders, action.payload]\n      };\n\n    case ADD_ORDER_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case UPDATE_ORDER_SUCCESS:\n      return { ...state,\n        orders: state.orders.map(order => order.id.toString() === action.payload.id.toString() ? {\n          order,\n          ...action.payload\n        } : order)\n      };\n\n    case UPDATE_ORDER_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case DELETE_ORDER_SUCCESS:\n      return { ...state,\n        orders: state.orders.filter(order => order.id.toString() !== action.payload.id.toString())\n      };\n\n    case DELETE_ORDER_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_CART_DATA_SUCCESS:\n      return { ...state,\n        cartData: action.payload\n      };\n\n    case GET_CART_DATA_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_CUSTOMERS_SUCCESS:\n      return { ...state,\n        customers: action.payload\n      };\n\n    case GET_CUSTOMERS_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_SHOPS_SUCCESS:\n      return { ...state,\n        shops: action.payload\n      };\n\n    case GET_SHOPS_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case ADD_CUSTOMER_SUCCESS:\n      return { ...state,\n        customers: [...state.customers, action.payload]\n      };\n\n    case ADD_CUSTOMER_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case UPDATE_CUSTOMER_SUCCESS:\n      return { ...state,\n        customers: state.customers.map(customer => customer.id.toString() === action.payload.id.toString() ? {\n          customer,\n          ...action.payload\n        } : customer)\n      };\n\n    case UPDATE_CUSTOMER_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case DELETE_CUSTOMER_SUCCESS:\n      return { ...state,\n        customers: state.customers.filter(customer => customer.id.toString() !== action.payload.id.toString())\n      };\n\n    case DELETE_CUSTOMER_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = Ecommerce;\nexport default Ecommerce;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ecommerce\");","map":{"version":3,"sources":["D:/localserver-php8/htdocs/react/realtyspace/src/store/e-commerce/reducer.js"],"names":["GET_CART_DATA_FAIL","GET_CART_DATA_SUCCESS","GET_CUSTOMERS_FAIL","GET_CUSTOMERS_SUCCESS","GET_ORDERS_FAIL","GET_ORDERS_SUCCESS","ADD_ORDER_SUCCESS","ADD_ORDER_FAIL","UPDATE_ORDER_SUCCESS","UPDATE_ORDER_FAIL","DELETE_ORDER_SUCCESS","DELETE_ORDER_FAIL","GET_PRODUCTS_FAIL","GET_PRODUCTS_SUCCESS","GET_SHOPS_FAIL","GET_SHOPS_SUCCESS","GET_PRODUCT_DETAIL_SUCCESS","GET_PRODUCT_DETAIL_FAIL","ADD_CUSTOMER_SUCCESS","ADD_CUSTOMER_FAIL","UPDATE_CUSTOMER_SUCCESS","UPDATE_CUSTOMER_FAIL","DELETE_CUSTOMER_SUCCESS","DELETE_CUSTOMER_FAIL","INIT_STATE","products","product","orders","cartData","customers","shops","error","Ecommerce","state","action","type","payload","map","order","id","toString","filter","customer"],"mappings":"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","sourcesContent":["import {\n  GET_CART_DATA_FAIL,\n  GET_CART_DATA_SUCCESS,\n  GET_CUSTOMERS_FAIL,\n  GET_CUSTOMERS_SUCCESS,\n  GET_ORDERS_FAIL,\n  GET_ORDERS_SUCCESS,\n  ADD_ORDER_SUCCESS,\n  ADD_ORDER_FAIL,\n  UPDATE_ORDER_SUCCESS,\n  UPDATE_ORDER_FAIL,\n  DELETE_ORDER_SUCCESS,\n  DELETE_ORDER_FAIL,\n  GET_PRODUCTS_FAIL,\n  GET_PRODUCTS_SUCCESS,\n  GET_SHOPS_FAIL,\n  GET_SHOPS_SUCCESS,\n  GET_PRODUCT_DETAIL_SUCCESS,\n  GET_PRODUCT_DETAIL_FAIL,\n  ADD_CUSTOMER_SUCCESS,\n  ADD_CUSTOMER_FAIL,\n  UPDATE_CUSTOMER_SUCCESS,\n  UPDATE_CUSTOMER_FAIL,\n  DELETE_CUSTOMER_SUCCESS,\n  DELETE_CUSTOMER_FAIL,\n} from \"./actionTypes\"\n\nconst INIT_STATE = {\n  products: [],\n  product: {},\n  orders: [],\n  cartData: {},\n  customers: [],\n  shops: [],\n  error: {},\n}\n\nconst Ecommerce = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_PRODUCTS_SUCCESS:\n      return {\n        ...state,\n        products: action.payload,\n      }\n\n    case GET_PRODUCTS_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case GET_PRODUCT_DETAIL_SUCCESS:\n      return {\n        ...state,\n        product: action.payload,\n      }\n\n    case GET_PRODUCT_DETAIL_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case GET_ORDERS_SUCCESS:\n      return {\n        ...state,\n        orders: action.payload,\n      }\n\n    case GET_ORDERS_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case ADD_ORDER_SUCCESS:\n      return {\n        ...state,\n        orders: [...state.orders, action.payload],\n      }\n\n    case ADD_ORDER_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case UPDATE_ORDER_SUCCESS:\n      return {\n        ...state,\n        orders: state.orders.map(order =>\n          order.id.toString() === action.payload.id.toString()\n            ? { order, ...action.payload }\n            : order\n        ),\n      }\n\n    case UPDATE_ORDER_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case DELETE_ORDER_SUCCESS:\n      return {\n        ...state,\n        orders: state.orders.filter(\n          order => order.id.toString() !== action.payload.id.toString()\n        ),\n      }\n\n    case DELETE_ORDER_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case GET_CART_DATA_SUCCESS:\n      return {\n        ...state,\n        cartData: action.payload,\n      }\n\n    case GET_CART_DATA_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case GET_CUSTOMERS_SUCCESS:\n      return {\n        ...state,\n        customers: action.payload,\n      }\n\n    case GET_CUSTOMERS_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case GET_SHOPS_SUCCESS:\n      return {\n        ...state,\n        shops: action.payload,\n      }\n\n    case GET_SHOPS_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n      case ADD_CUSTOMER_SUCCESS:\n        return {\n          ...state,\n          customers: [...state.customers, action.payload],\n        }\n  \n      case ADD_CUSTOMER_FAIL:\n        return {\n          ...state,\n          error: action.payload,\n        }\n  \n        case UPDATE_CUSTOMER_SUCCESS:\n          return {\n            ...state,\n            customers: state.customers.map(customer =>\n              customer.id.toString() === action.payload.id.toString()\n                ? { customer, ...action.payload }\n                : customer\n            ),\n          }\n    \n        case UPDATE_CUSTOMER_FAIL:\n          return {\n            ...state,\n            error: action.payload,\n          }\n    \n        case DELETE_CUSTOMER_SUCCESS:\n          return {\n            ...state,\n            customers: state.customers.filter(\n              customer => customer.id.toString() !== action.payload.id.toString()\n            ),\n          }\n    \n        case DELETE_CUSTOMER_FAIL:\n          return {\n            ...state,\n            error: action.payload,\n          }\n\n    default:\n      return state\n  }\n}\n\nexport default Ecommerce\n"]},"metadata":{},"sourceType":"module"}
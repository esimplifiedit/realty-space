{"ast":null,"code":"import _regeneratorRuntime from\"D:/localserver-php8/htdocs/react/realtyspace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(getChartsData),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchGetChartsData),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(dashboardSaga);import{call,put,takeEvery,all,fork}from\"redux-saga/effects\";// Crypto Redux States\nimport{GET_CHARTS_DATA}from\"./actionTypes\";import{apiSuccess,apiFail}from\"./actions\";//Include Both Helper File with needed methods\nimport{getWeeklyData,getYearlyData,getMonthlyData}from\"../../helpers/fakebackend_helper\";function getChartsData(_ref){var periodType,response;return _regeneratorRuntime.wrap(function getChartsData$(_context){while(1){switch(_context.prev=_context.next){case 0:periodType=_ref.payload;_context.prev=1;if(!(periodType==\"monthly\")){_context.next=6;break;}_context.next=5;return call(getWeeklyData,periodType);case 5:response=_context.sent;case 6:if(!(periodType==\"yearly\")){_context.next=10;break;}_context.next=9;return call(getYearlyData,periodType);case 9:response=_context.sent;case 10:if(!(periodType==\"weekly\")){_context.next=14;break;}_context.next=13;return call(getMonthlyData,periodType);case 13:response=_context.sent;case 14:_context.next=16;return put(apiSuccess(GET_CHARTS_DATA,response));case 16:_context.next=22;break;case 18:_context.prev=18;_context.t0=_context[\"catch\"](1);_context.next=22;return put(apiFail(GET_CHARTS_DATA,_context.t0));case 22:case\"end\":return _context.stop();}}},_marked,null,[[1,18]]);}export function watchGetChartsData(){return _regeneratorRuntime.wrap(function watchGetChartsData$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(GET_CHARTS_DATA,getChartsData);case 2:case\"end\":return _context2.stop();}}},_marked2);}function dashboardSaga(){return _regeneratorRuntime.wrap(function dashboardSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([fork(watchGetChartsData)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}export default dashboardSaga;","map":{"version":3,"sources":["D:/localserver-php8/htdocs/react/realtyspace/src/store/dashboard/saga.js"],"names":["getChartsData","watchGetChartsData","dashboardSaga","call","put","takeEvery","all","fork","GET_CHARTS_DATA","apiSuccess","apiFail","getWeeklyData","getYearlyData","getMonthlyData","periodType","payload","response"],"mappings":"4MAcUA,a,iDAoBOC,kB,iDAIPC,a,EAtCV,OAASC,IAAT,CAAeC,GAAf,CAAoBC,SAApB,CAA+BC,GAA/B,CAAoCC,IAApC,KAAgD,oBAAhD,CAEA;AACA,OAASC,eAAT,KAAgC,eAAhC,CACA,OAASC,UAAT,CAAqBC,OAArB,KAAoC,WAApC,CAEA;AACA,OACIC,aADJ,CAEIC,aAFJ,CAGIC,cAHJ,KAKS,kCALT,CAOA,QAAUb,CAAAA,aAAV,qJAAmCc,UAAnC,MAA0BC,OAA1B,sBAGYD,UAAU,EAAI,SAH1B,0CAIuB,MAAMX,CAAAA,IAAI,CAACQ,aAAD,CAAgBG,UAAhB,CAAV,CAJvB,OAIYE,QAJZ,2BAMYF,UAAU,EAAI,QAN1B,2CAOuB,MAAMX,CAAAA,IAAI,CAACS,aAAD,CAAgBE,UAAhB,CAAV,CAPvB,OAOYE,QAPZ,4BASYF,UAAU,EAAI,QAT1B,4CAUuB,MAAMX,CAAAA,IAAI,CAACU,cAAD,CAAiBC,UAAjB,CAAV,CAVvB,QAUYE,QAVZ,wCAaQ,MAAMZ,CAAAA,GAAG,CAACK,UAAU,CAACD,eAAD,CAAkBQ,QAAlB,CAAX,CAAT,CAbR,0GAeQ,MAAMZ,CAAAA,GAAG,CAACM,OAAO,CAACF,eAAD,aAAR,CAAT,CAfR,qEAoBA,MAAO,SAAUP,CAAAA,kBAAV,kJACH,MAAMI,CAAAA,SAAS,CAACG,eAAD,CAAkBR,aAAlB,CAAf,CADG,wDAIP,QAAUE,CAAAA,aAAV,6IACI,MAAMI,CAAAA,GAAG,CAAC,CAACC,IAAI,CAACN,kBAAD,CAAL,CAAD,CAAT,CADJ,wDAIA,cAAeC,CAAAA,aAAf","sourcesContent":["import { call, put, takeEvery, all, fork } from \"redux-saga/effects\";\n\n// Crypto Redux States\nimport { GET_CHARTS_DATA } from \"./actionTypes\";\nimport { apiSuccess, apiFail } from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport {\n    getWeeklyData,\n    getYearlyData,\n    getMonthlyData,\n}\n    from \"../../helpers/fakebackend_helper\";\n\nfunction* getChartsData({ payload: periodType }) {\n    try {\n        var response;\n        if (periodType == \"monthly\") {\n            response = yield call(getWeeklyData, periodType);\n        }\n        if (periodType == \"yearly\") {\n            response = yield call(getYearlyData, periodType);\n        }\n        if (periodType == \"weekly\") {\n            response = yield call(getMonthlyData, periodType);\n        }\n\n        yield put(apiSuccess(GET_CHARTS_DATA, response));\n    } catch (error) {\n        yield put(apiFail(GET_CHARTS_DATA, error));\n    }\n}\n\n\nexport function* watchGetChartsData() {\n    yield takeEvery(GET_CHARTS_DATA, getChartsData);\n}\n\nfunction* dashboardSaga() {\n    yield all([fork(watchGetChartsData)]);\n}\n\nexport default dashboardSaga;\n"]},"metadata":{},"sourceType":"module"}
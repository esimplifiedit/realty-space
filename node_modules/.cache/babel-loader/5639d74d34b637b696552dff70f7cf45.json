{"ast":null,"code":"import { call, put, takeEvery, all, fork } from \"redux-saga/effects\"; // Crypto Redux States\n\nimport { GET_TOP_SELLING_PRODUCT, GET_EARNING_DATA } from \"./actionType\";\nimport { apiSuccess, apiFail } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { topSellingData as topSellingDataApi, getEarningChartsData as getEarningChartsDataApi } from \"../../helpers/fakebackend_helper\";\n\nfunction* getSellingData({\n  payload: month\n}) {\n  try {\n    var response = yield call(topSellingDataApi, month);\n    yield put(apiSuccess(GET_TOP_SELLING_PRODUCT, response));\n  } catch (error) {\n    yield put(apiFail(GET_TOP_SELLING_PRODUCT, error));\n  }\n}\n\nfunction* getEarningChartsData({\n  payload: month\n}) {\n  try {\n    var response = yield call(getEarningChartsDataApi, month);\n    yield put(apiSuccess(GET_EARNING_DATA, response));\n  } catch (error) {\n    yield put(apiFail(GET_EARNING_DATA, error));\n  }\n}\n\nexport function* watchGetSellingdata() {\n  yield takeEvery(GET_TOP_SELLING_PRODUCT, getSellingData);\n}\nexport function* watchGetEarningChartsData() {\n  yield takeEvery(GET_EARNING_DATA, getEarningChartsData);\n}\n\nfunction* dashboardSaasSaga() {\n  yield all([fork(watchGetSellingdata)], yield all([fork(watchGetEarningChartsData)]));\n}\n\nexport default dashboardSaasSaga;","map":{"version":3,"sources":["D:/localserver-php8/htdocs/react/realtyspace/src/store/dashboard-saas/saga.js"],"names":["call","put","takeEvery","all","fork","GET_TOP_SELLING_PRODUCT","GET_EARNING_DATA","apiSuccess","apiFail","topSellingData","topSellingDataApi","getEarningChartsData","getEarningChartsDataApi","getSellingData","payload","month","response","error","watchGetSellingdata","watchGetEarningChartsData","dashboardSaasSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,uBAAT,EAAkCC,gBAAlC,QAA0D,cAA1D;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,WAApC,C,CAEA;;AACA,SACIC,cAAc,IAAIC,iBADtB,EAEIC,oBAAoB,IAAIC,uBAF5B,QAIS,kCAJT;;AAMA,UAAUC,cAAV,CAAyB;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAzB,EAA6C;AACzC,MAAI;AACA,QAAIC,QAAQ,GAAG,MAAMhB,IAAI,CAACU,iBAAD,EAAoBK,KAApB,CAAzB;AACA,UAAMd,GAAG,CAACM,UAAU,CAACF,uBAAD,EAA0BW,QAA1B,CAAX,CAAT;AACH,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,UAAMhB,GAAG,CAACO,OAAO,CAACH,uBAAD,EAA0BY,KAA1B,CAAR,CAAT;AACH;AACJ;;AAGD,UAAUN,oBAAV,CAA+B;AAAEG,EAAAA,OAAO,EAAEC;AAAX,CAA/B,EAAmD;AAC/C,MAAI;AACA,QAAIC,QAAQ,GAAG,MAAMhB,IAAI,CAACY,uBAAD,EAA0BG,KAA1B,CAAzB;AACA,UAAMd,GAAG,CAACM,UAAU,CAACD,gBAAD,EAAmBU,QAAnB,CAAX,CAAT;AACH,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,UAAMhB,GAAG,CAACO,OAAO,CAACF,gBAAD,EAAmBW,KAAnB,CAAR,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAMhB,SAAS,CAACG,uBAAD,EAA0BQ,cAA1B,CAAf;AACH;AAED,OAAO,UAAUM,yBAAV,GAAsC;AACzC,QAAMjB,SAAS,CAACI,gBAAD,EAAmBK,oBAAnB,CAAf;AACH;;AAGD,UAAUS,iBAAV,GAA8B;AAC1B,QAAMjB,GAAG,CAAC,CAACC,IAAI,CAACc,mBAAD,CAAL,CAAD,EACL,MAAMf,GAAG,CAAC,CAACC,IAAI,CAACe,yBAAD,CAAL,CAAD,CADJ,CAAT;AAGH;;AAED,eAAeC,iBAAf","sourcesContent":["import { call, put, takeEvery, all, fork } from \"redux-saga/effects\";\n\n// Crypto Redux States\nimport { GET_TOP_SELLING_PRODUCT, GET_EARNING_DATA } from \"./actionType\";\nimport { apiSuccess, apiFail } from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport {\n    topSellingData as topSellingDataApi,\n    getEarningChartsData as getEarningChartsDataApi\n}\n    from \"../../helpers/fakebackend_helper\";\n\nfunction* getSellingData({ payload: month }) {\n    try {\n        var response = yield call(topSellingDataApi, month);\n        yield put(apiSuccess(GET_TOP_SELLING_PRODUCT, response));\n    } catch (error) {\n        yield put(apiFail(GET_TOP_SELLING_PRODUCT, error));\n    }\n}\n\n\nfunction* getEarningChartsData({ payload: month }) {\n    try {\n        var response = yield call(getEarningChartsDataApi, month);\n        yield put(apiSuccess(GET_EARNING_DATA, response));\n    } catch (error) {\n        yield put(apiFail(GET_EARNING_DATA, error));\n    }\n}\n\nexport function* watchGetSellingdata() {\n    yield takeEvery(GET_TOP_SELLING_PRODUCT, getSellingData);\n}\n\nexport function* watchGetEarningChartsData() {\n    yield takeEvery(GET_EARNING_DATA, getEarningChartsData);\n}\n\n\nfunction* dashboardSaasSaga() {\n    yield all([fork(watchGetSellingdata)],\n        yield all([fork(watchGetEarningChartsData)])\n    );\n}\n\nexport default dashboardSaasSaga;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from\"D:/localserver-php8/htdocs/react/realtyspace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchWallet),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchCrypto),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(cryptoSaga);import{call,put,takeEvery}from\"redux-saga/effects\";// Crypto Redux States\nimport{GET_WALLET,GET_CRYPTO_ORDERS}from\"./actionTypes\";import{getWalletSuccess,getWalletFail,getCryptoOrdersSuccess,getCryptoOrdersFail}from\"./actions\";//Include Both Helper File with needed methods\nimport{getWallet,getCryptoOrder}from\"helpers/fakebackend_helper\";function fetchWallet(){var response;return _regeneratorRuntime.wrap(function fetchWallet$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(getWallet);case 3:response=_context.sent;_context.next=6;return put(getWalletSuccess(response));case 6:_context.next=12;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);_context.next=12;return put(getWalletFail(_context.t0));case 12:case\"end\":return _context.stop();}}},_marked,null,[[0,8]]);}function fetchCrypto(){var response;return _regeneratorRuntime.wrap(function fetchCrypto$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return call(getCryptoOrder);case 3:response=_context2.sent;_context2.next=6;return put(getCryptoOrdersSuccess(response));case 6:_context2.next=12;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](0);_context2.next=12;return put(getCryptoOrdersFail(_context2.t0));case 12:case\"end\":return _context2.stop();}}},_marked2,null,[[0,8]]);}function cryptoSaga(){return _regeneratorRuntime.wrap(function cryptoSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return takeEvery(GET_WALLET,fetchWallet);case 2:_context3.next=4;return takeEvery(GET_CRYPTO_ORDERS,fetchCrypto);case 4:case\"end\":return _context3.stop();}}},_marked3);}export default cryptoSaga;","map":{"version":3,"sources":["D:/localserver-php8/htdocs/react/realtyspace/src/store/crypto/saga.js"],"names":["fetchWallet","fetchCrypto","cryptoSaga","call","put","takeEvery","GET_WALLET","GET_CRYPTO_ORDERS","getWalletSuccess","getWalletFail","getCryptoOrdersSuccess","getCryptoOrdersFail","getWallet","getCryptoOrder","response"],"mappings":"4MAcUA,W,iDASAC,W,iDASAC,U,EAhCV,OAASC,IAAT,CAAeC,GAAf,CAAoBC,SAApB,KAAqC,oBAArC,CAEA;AACA,OAASC,UAAT,CAAqBC,iBAArB,KAA8C,eAA9C,CACA,OACEC,gBADF,CAEEC,aAFF,CAGEC,sBAHF,CAIEC,mBAJF,KAKO,WALP,CAOA;AACA,OAASC,SAAT,CAAoBC,cAApB,KAA0C,4BAA1C,CAEA,QAAUb,CAAAA,WAAV,oKAEqB,MAAMG,CAAAA,IAAI,CAACS,SAAD,CAAV,CAFrB,OAEUE,QAFV,+BAGI,MAAMV,CAAAA,GAAG,CAACI,gBAAgB,CAACM,QAAD,CAAjB,CAAT,CAHJ,uGAKI,MAAMV,CAAAA,GAAG,CAACK,aAAa,aAAd,CAAT,CALJ,oEASA,QAAUR,CAAAA,WAAV,yKAEqB,MAAME,CAAAA,IAAI,CAACU,cAAD,CAAV,CAFrB,OAEUC,QAFV,iCAGI,MAAMV,CAAAA,GAAG,CAACM,sBAAsB,CAACI,QAAD,CAAvB,CAAT,CAHJ,4GAKI,MAAMV,CAAAA,GAAG,CAACO,mBAAmB,cAApB,CAAT,CALJ,sEASA,QAAUT,CAAAA,UAAV,0IACE,MAAMG,CAAAA,SAAS,CAACC,UAAD,CAAaN,WAAb,CAAf,CADF,wBAEE,MAAMK,CAAAA,SAAS,CAACE,iBAAD,CAAoBN,WAApB,CAAf,CAFF,wDAKA,cAAeC,CAAAA,UAAf","sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\"\n\n// Crypto Redux States\nimport { GET_WALLET, GET_CRYPTO_ORDERS } from \"./actionTypes\"\nimport {\n  getWalletSuccess,\n  getWalletFail,\n  getCryptoOrdersSuccess,\n  getCryptoOrdersFail,\n} from \"./actions\"\n\n//Include Both Helper File with needed methods\nimport { getWallet, getCryptoOrder } from \"helpers/fakebackend_helper\"\n\nfunction* fetchWallet() {\n  try {\n    const response = yield call(getWallet)\n    yield put(getWalletSuccess(response))\n  } catch (error) {\n    yield put(getWalletFail(error))\n  }\n}\n\nfunction* fetchCrypto() {\n  try {\n    const response = yield call(getCryptoOrder)\n    yield put(getCryptoOrdersSuccess(response))\n  } catch (error) {\n    yield put(getCryptoOrdersFail(error))\n  }\n}\n\nfunction* cryptoSaga() {\n  yield takeEvery(GET_WALLET, fetchWallet)\n  yield takeEvery(GET_CRYPTO_ORDERS, fetchCrypto)\n}\n\nexport default cryptoSaga\n"]},"metadata":{},"sourceType":"module"}
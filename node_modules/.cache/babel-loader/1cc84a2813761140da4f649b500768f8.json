{"ast":null,"code":"import { takeEvery, put, call } from \"redux-saga/effects\"; //Account Redux states\n\nimport { REGISTER_USER } from \"./actionTypes\";\nimport { registerUserSuccessful, registerUserFailed } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeRegister, postJwtRegister } from \"../../../helpers/fakebackend_helper\"; // initialize relavant method of both Auth\n\nconst fireBaseBackend = getFirebaseBackend(); // Is user register successfull then direct plot user in redux.\n\nfunction* registerUser({\n  payload: {\n    user\n  }\n}) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\n      yield put(registerUserSuccessful(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtRegister, \"/post-jwt-register\", user);\n      yield put(registerUserSuccessful(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeRegister, user);\n      yield put(registerUserSuccessful(response));\n    }\n  } catch (error) {\n    yield put(registerUserFailed(error));\n  }\n}\n\nfunction* accountSaga() {\n  yield takeEvery(REGISTER_USER, registerUser);\n}\n\nexport default accountSaga;","map":{"version":3,"sources":["D:/localserver-php8/htdocs/react/realtyspace/src/store/auth/register/saga.js"],"names":["takeEvery","put","call","REGISTER_USER","registerUserSuccessful","registerUserFailed","getFirebaseBackend","postFakeRegister","postJwtRegister","fireBaseBackend","registerUser","payload","user","process","env","REACT_APP_DEFAULTAUTH","response","email","password","error","accountSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC,C,CAEA;;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,sBAAT,EAAiCC,kBAAjC,QAA2D,WAA3D,C,CAEA;;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AACA,SACEC,gBADF,EAEEC,eAFF,QAGO,qCAHP,C,CAKA;;AACA,MAAMC,eAAe,GAAGH,kBAAkB,EAA1C,C,CAEA;;AACA,UAAUI,YAAV,CAAuB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAAX,CAAvB,EAA8C;AAC5C,MAAI;AACF,QAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACpD,YAAMC,QAAQ,GAAG,MAAMd,IAAI,CACzBO,eAAe,CAACC,YADS,EAEzBE,IAAI,CAACK,KAFoB,EAGzBL,IAAI,CAACM,QAHoB,CAA3B;AAKA,YAAMjB,GAAG,CAACG,sBAAsB,CAACY,QAAD,CAAvB,CAAT;AACD,KAPD,MAOO,IAAIH,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,KAA1C,EAAiD;AACtD,YAAMC,QAAQ,GAAG,MAAMd,IAAI,CAACM,eAAD,EAAkB,oBAAlB,EAAwCI,IAAxC,CAA3B;AACA,YAAMX,GAAG,CAACG,sBAAsB,CAACY,QAAD,CAAvB,CAAT;AACD,KAHM,MAGA,IAAIH,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,MAA1C,EAAkD;AACvD,YAAMC,QAAQ,GAAG,MAAMd,IAAI,CAACK,gBAAD,EAAmBK,IAAnB,CAA3B;AACA,YAAMX,GAAG,CAACG,sBAAsB,CAACY,QAAD,CAAvB,CAAT;AACD;AACF,GAfD,CAeE,OAAOG,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACI,kBAAkB,CAACc,KAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUC,WAAV,GAAwB;AACtB,QAAMpB,SAAS,CAACG,aAAD,EAAgBO,YAAhB,CAAf;AACD;;AAED,eAAeU,WAAf","sourcesContent":["import { takeEvery, put, call } from \"redux-saga/effects\"\n\n//Account Redux states\nimport { REGISTER_USER } from \"./actionTypes\"\nimport { registerUserSuccessful, registerUserFailed } from \"./actions\"\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"\nimport {\n  postFakeRegister,\n  postJwtRegister,\n} from \"../../../helpers/fakebackend_helper\"\n\n// initialize relavant method of both Auth\nconst fireBaseBackend = getFirebaseBackend()\n\n// Is user register successfull then direct plot user in redux.\nfunction* registerUser({ payload: { user } }) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(\n        fireBaseBackend.registerUser,\n        user.email,\n        user.password\n      )\n      yield put(registerUserSuccessful(response))\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtRegister, \"/post-jwt-register\", user)\n      yield put(registerUserSuccessful(response))\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeRegister, user)\n      yield put(registerUserSuccessful(response))\n    }\n  } catch (error) {\n    yield put(registerUserFailed(error))\n  }\n}\n\nfunction* accountSaga() {\n  yield takeEvery(REGISTER_USER, registerUser)\n}\n\nexport default accountSaga\n"]},"metadata":{},"sourceType":"module"}
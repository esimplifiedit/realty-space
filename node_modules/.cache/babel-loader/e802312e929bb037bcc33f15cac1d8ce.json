{"ast":null,"code":"import _regeneratorRuntime from\"D:/localserver-php8/htdocs/react/realtyspace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(registerUser),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(accountSaga);import{takeEvery,put,call}from\"redux-saga/effects\";//Account Redux states\nimport{REGISTER_USER}from\"./actionTypes\";import{registerUserSuccessful,registerUserFailed}from\"./actions\";//Include Both Helper File with needed methods\nimport{getFirebaseBackend}from\"../../../helpers/firebase_helper\";import{postFakeRegister,postJwtRegister}from\"../../../helpers/fakebackend_helper\";// initialize relavant method of both Auth\nvar fireBaseBackend=getFirebaseBackend();// Is user register successfull then direct plot user in redux.\nfunction registerUser(_ref){var user,response,_response,_response2;return _regeneratorRuntime.wrap(function registerUser$(_context){while(1){switch(_context.prev=_context.next){case 0:user=_ref.payload.user;_context.prev=1;if(!(process.env.REACT_APP_DEFAULTAUTH===\"firebase\")){_context.next=10;break;}_context.next=5;return call(fireBaseBackend.registerUser,user.email,user.password);case 5:response=_context.sent;_context.next=8;return put(registerUserSuccessful(response));case 8:_context.next=24;break;case 10:if(!(process.env.REACT_APP_DEFAULTAUTH===\"jwt\")){_context.next=18;break;}_context.next=13;return call(postJwtRegister,\"/post-jwt-register\",user);case 13:_response=_context.sent;_context.next=16;return put(registerUserSuccessful(_response));case 16:_context.next=24;break;case 18:if(!(process.env.REACT_APP_DEFAULTAUTH===\"fake\")){_context.next=24;break;}_context.next=21;return call(postFakeRegister,user);case 21:_response2=_context.sent;_context.next=24;return put(registerUserSuccessful(_response2));case 24:_context.next=30;break;case 26:_context.prev=26;_context.t0=_context[\"catch\"](1);_context.next=30;return put(registerUserFailed(_context.t0));case 30:case\"end\":return _context.stop();}}},_marked,null,[[1,26]]);}function accountSaga(){return _regeneratorRuntime.wrap(function accountSaga$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(REGISTER_USER,registerUser);case 2:case\"end\":return _context2.stop();}}},_marked2);}export default accountSaga;","map":{"version":3,"sources":["D:/localserver-php8/htdocs/react/realtyspace/src/store/auth/register/saga.js"],"names":["registerUser","accountSaga","takeEvery","put","call","REGISTER_USER","registerUserSuccessful","registerUserFailed","getFirebaseBackend","postFakeRegister","postJwtRegister","fireBaseBackend","user","payload","process","env","REACT_APP_DEFAULTAUTH","email","password","response"],"mappings":"4MAiBUA,Y,iDAqBAC,W,EAtCV,OAASC,SAAT,CAAoBC,GAApB,CAAyBC,IAAzB,KAAqC,oBAArC,CAEA;AACA,OAASC,aAAT,KAA8B,eAA9B,CACA,OAASC,sBAAT,CAAiCC,kBAAjC,KAA2D,WAA3D,CAEA;AACA,OAASC,kBAAT,KAAmC,kCAAnC,CACA,OACEC,gBADF,CAEEC,eAFF,KAGO,qCAHP,CAKA;AACA,GAAMC,CAAAA,eAAe,CAAGH,kBAAkB,EAA1C,CAEA;AACA,QAAUR,CAAAA,YAAV,mKAAoCY,IAApC,MAAyBC,OAAzB,CAAoCD,IAApC,sBAEQE,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAsC,UAF9C,2CAGuB,MAAMZ,CAAAA,IAAI,CACzBO,eAAe,CAACX,YADS,CAEzBY,IAAI,CAACK,KAFoB,CAGzBL,IAAI,CAACM,QAHoB,CAAV,CAHvB,OAGYC,QAHZ,+BAQM,MAAMhB,CAAAA,GAAG,CAACG,sBAAsB,CAACa,QAAD,CAAvB,CAAT,CARN,2CASeL,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAsC,KATrD,4CAUuB,MAAMZ,CAAAA,IAAI,CAACM,eAAD,CAAkB,oBAAlB,CAAwCE,IAAxC,CAAV,CAVvB,QAUYO,SAVZ,gCAWM,MAAMhB,CAAAA,GAAG,CAACG,sBAAsB,CAACa,SAAD,CAAvB,CAAT,CAXN,4CAYeL,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAsC,MAZrD,4CAauB,MAAMZ,CAAAA,IAAI,CAACK,gBAAD,CAAmBG,IAAnB,CAAV,CAbvB,QAaYO,UAbZ,gCAcM,MAAMhB,CAAAA,GAAG,CAACG,sBAAsB,CAACa,UAAD,CAAvB,CAAT,CAdN,0GAiBI,MAAMhB,CAAAA,GAAG,CAACI,kBAAkB,aAAnB,CAAT,CAjBJ,qEAqBA,QAAUN,CAAAA,WAAV,2IACE,MAAMC,CAAAA,SAAS,CAACG,aAAD,CAAgBL,YAAhB,CAAf,CADF,wDAIA,cAAeC,CAAAA,WAAf","sourcesContent":["import { takeEvery, put, call } from \"redux-saga/effects\"\n\n//Account Redux states\nimport { REGISTER_USER } from \"./actionTypes\"\nimport { registerUserSuccessful, registerUserFailed } from \"./actions\"\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"\nimport {\n  postFakeRegister,\n  postJwtRegister,\n} from \"../../../helpers/fakebackend_helper\"\n\n// initialize relavant method of both Auth\nconst fireBaseBackend = getFirebaseBackend()\n\n// Is user register successfull then direct plot user in redux.\nfunction* registerUser({ payload: { user } }) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(\n        fireBaseBackend.registerUser,\n        user.email,\n        user.password\n      )\n      yield put(registerUserSuccessful(response))\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtRegister, \"/post-jwt-register\", user)\n      yield put(registerUserSuccessful(response))\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeRegister, user)\n      yield put(registerUserSuccessful(response))\n    }\n  } catch (error) {\n    yield put(registerUserFailed(error))\n  }\n}\n\nfunction* accountSaga() {\n  yield takeEvery(REGISTER_USER, registerUser)\n}\n\nexport default accountSaga\n"]},"metadata":{},"sourceType":"module"}
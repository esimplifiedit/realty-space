{"ast":null,"code":"import { GET_PROJECTS_FAIL, GET_PROJECTS_SUCCESS, GET_PROJECT_DETAIL_FAIL, GET_PROJECT_DETAIL_SUCCESS, ADD_PROJECT_SUCCESS, ADD_PROJECT_FAIL, UPDATE_PROJECT_SUCCESS, UPDATE_PROJECT_FAIL, DELETE_PROJECT_SUCCESS, DELETE_PROJECT_FAIL } from \"./actionTypes\";\nconst INIT_STATE = {\n  projects: [],\n  projectDetail: {},\n  error: {}\n};\n\nconst projects = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_PROJECTS_SUCCESS:\n      return { ...state,\n        projects: action.payload\n      };\n\n    case GET_PROJECTS_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_PROJECT_DETAIL_SUCCESS:\n      return { ...state,\n        projectDetail: action.payload\n      };\n\n    case GET_PROJECT_DETAIL_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case ADD_PROJECT_SUCCESS:\n      return { ...state,\n        projects: [...state.projects, action.payload]\n      };\n\n    case ADD_PROJECT_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case UPDATE_PROJECT_SUCCESS:\n      return { ...state,\n        projects: state.projects.map(project => project.id.toString() === action.payload.id.toString() ? {\n          project,\n          ...action.payload\n        } : project)\n      };\n\n    case UPDATE_PROJECT_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case DELETE_PROJECT_SUCCESS:\n      return { ...state,\n        projects: state.projects.filter(project => project.id.toString() !== action.payload.id.toString())\n      };\n\n    case DELETE_PROJECT_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default projects;","map":{"version":3,"sources":["D:/localserver-php8/htdocs/react/realtyspace/src/store/projects/reducer.js"],"names":["GET_PROJECTS_FAIL","GET_PROJECTS_SUCCESS","GET_PROJECT_DETAIL_FAIL","GET_PROJECT_DETAIL_SUCCESS","ADD_PROJECT_SUCCESS","ADD_PROJECT_FAIL","UPDATE_PROJECT_SUCCESS","UPDATE_PROJECT_FAIL","DELETE_PROJECT_SUCCESS","DELETE_PROJECT_FAIL","INIT_STATE","projects","projectDetail","error","state","action","type","payload","map","project","id","toString","filter"],"mappings":"AAAA,SACEA,iBADF,EAEEC,oBAFF,EAGEC,uBAHF,EAIEC,0BAJF,EAKEC,mBALF,EAMEC,gBANF,EAOEC,sBAPF,EAQEC,mBARF,EASEC,sBATF,EAUEC,mBAVF,QAWO,eAXP;AAaA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,aAAa,EAAE,EAFE;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAAnB;;AAMA,MAAMF,QAAQ,GAAG,CAACG,KAAK,GAAGJ,UAAT,EAAqBK,MAArB,KAAgC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,oBAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELH,QAAAA,QAAQ,EAAEI,MAAM,CAACE;AAFZ,OAAP;;AAKF,SAAKjB,iBAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELD,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAKd,0BAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELF,QAAAA,aAAa,EAAEG,MAAM,CAACE;AAFjB,OAAP;;AAKF,SAAKf,uBAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELD,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAKb,mBAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELH,QAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAoBI,MAAM,CAACE,OAA3B;AAFL,OAAP;;AAKF,SAAKZ,gBAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELD,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAKX,sBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeO,GAAf,CAAmBC,OAAO,IAClCA,OAAO,CAACC,EAAR,CAAWC,QAAX,OAA0BN,MAAM,CAACE,OAAP,CAAeG,EAAf,CAAkBC,QAAlB,EAA1B,GACI;AAAEF,UAAAA,OAAF;AAAW,aAAGJ,MAAM,CAACE;AAArB,SADJ,GAEIE,OAHI;AAFL,OAAP;;AASF,SAAKZ,mBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELD,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAKT,sBAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeW,MAAf,CACRH,OAAO,IAAIA,OAAO,CAACC,EAAR,CAAWC,QAAX,OAA0BN,MAAM,CAACE,OAAP,CAAeG,EAAf,CAAkBC,QAAlB,EAD7B;AAFL,OAAP;;AAOF,SAAKZ,mBAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELD,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFT,OAAP;;AAKF;AACE,aAAOH,KAAP;AApEJ;AAsED,CAvED;;AAyEA,eAAeH,QAAf","sourcesContent":["import {\n  GET_PROJECTS_FAIL,\n  GET_PROJECTS_SUCCESS,\n  GET_PROJECT_DETAIL_FAIL,\n  GET_PROJECT_DETAIL_SUCCESS,\n  ADD_PROJECT_SUCCESS,\n  ADD_PROJECT_FAIL,\n  UPDATE_PROJECT_SUCCESS,\n  UPDATE_PROJECT_FAIL,\n  DELETE_PROJECT_SUCCESS,\n  DELETE_PROJECT_FAIL,\n} from \"./actionTypes\"\n\nconst INIT_STATE = {\n  projects: [],\n  projectDetail: {},\n  error: {},\n}\n\nconst projects = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_PROJECTS_SUCCESS:\n      return {\n        ...state,\n        projects: action.payload,\n      }\n\n    case GET_PROJECTS_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case GET_PROJECT_DETAIL_SUCCESS:\n      return {\n        ...state,\n        projectDetail: action.payload,\n      }\n\n    case GET_PROJECT_DETAIL_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case ADD_PROJECT_SUCCESS:\n      return {\n        ...state,\n        projects: [...state.projects, action.payload],\n      }\n\n    case ADD_PROJECT_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case UPDATE_PROJECT_SUCCESS:\n      return {\n        ...state,\n        projects: state.projects.map(project =>\n          project.id.toString() === action.payload.id.toString()\n            ? { project, ...action.payload }\n            : project\n        ),\n      }\n\n    case UPDATE_PROJECT_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case DELETE_PROJECT_SUCCESS:\n      return {\n        ...state,\n        projects: state.projects.filter(\n          project => project.id.toString() !== action.payload.id.toString()\n        ),\n      }\n\n    case DELETE_PROJECT_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default projects\n"]},"metadata":{},"sourceType":"module"}